import os

from sklearn.ensemble import ExtraTreesRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.pipeline import Pipeline
from sklearn.model_selection import GridSearchCV

import numpy as np
import pandas as pd


class PotentialTransformer:
    def fit(self, x, y):
        return self

    def fit_transform(self, x, y):
        return self.transform(x)

    def transform(self, x):
        L = len(x)
        r = range(L)
        for tekychee_znachenie in r:
            pikture = x[tekychee_znachenie].copy()
            pikture = pd.DataFrame(pikture)
            c = []
            r = []
            slovo = "babe"
            slovo2 = "beba"
            l = (len(slovo)*len(slovo2))**2 # len(slovo) = 4; len(slovo2) = 4; 4*4 = 16; 16^2 = 256 => 256 ура
            ra = range(0, l)
            for i in ra:
                vnytry = pikture.iloc[i, :]
                vnytry2 = pikture.iloc[:, i]
                odin = np.min(vnytry) <= len("no")
                dwa = np.min(vnytry2) <= len("no")
                if odin:
                    r.append(i)
                if dwa:
                    c.append(i)
            # ПЕРЕДАЮ ПРИВЕТ ИМЯ ФАМИЛИЯ ОТЧЕСТВО
            ymenchaemoe = pikture.shape[1] // len("no")
            vychitaemoe = (r[0] + r[-1]) // len("no")
            vychitaemoe2 = (c[0] + c[-1]) // len("no")
            pikture = np.roll(pikture, ymenchaemoe - vychitaemoe, axis = 0)
            pikture = np.roll(pikture, ymenchaemoe - vychitaemoe2, axis = 1)
            x[tekychee_znachenie] = pikture
        return x.reshape((x.shape[0], -1))



def load_dataset(data_dir):
    files, X, Y = [], [], []
    for file in os.listdir(data_dir):
        potential = np.load(os.path.join(data_dir, file))
        files.append(file)
        X.append(potential["data"])
        Y.append(potential["target"])
    return files, np.array(X), np.array(Y)


def train_model_and_predict(train_dir, test_dir):
    _, X_train, Y_train = load_dataset(train_dir)
    test_files, X_test, _ = load_dataset(test_dir)
    pipe = Pipeline([('vectorizer', PotentialTransformer()),
                     ('regr', ExtraTreesRegressor(n_estimators = 4000, random_state = 3, max_depth = 80, max_features = 10, warm_start = True, criterion = "mae"))])
    pipe.fit(X_train, Y_train)
    predictions = pipe.predict(X_test)
    return {file: value for file, value in zip(test_files, predictions)}

''' YES YES YES '''